{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/**\n * JsonUri\n * @author Linkjun @linkjun.com\n * @description\n *   get(data, '/menu/id/');\n *   get(data, '/menu/id/../');\n *   get(data, '/menu/id/.../');\n *   get(data, '/menu/id/~/');\n *   set(data, '/menu/id/',[0,1,2,3,4]);\n *   mv(data, '/menu/id/0', '/menu/id/2');\n *   swap(data, '/menu/id/0', '/menu/id/1');\n *   rm(data, '/menu/value/');\n */\n\n/**\n * require isObject,\n *         isArray,\n *         arrayMove\n */\nimport Jsonuri from './jsonuri'\nimport {isInteger, isObject, isArray, arrayMove, walk, combingPathKey, normalizePath, indexOf} from './util'\n\n/**\n * Get\n * @param  {Object} data  typeof Object or Array.\n * @param  {String} path  ex: '/menu/nav/list'.\n * @param {[type]}        return value.\n */\nfunction get(data, path) {\n  return Jsonuri(data, path)\n}\n\n/**\n * Set\n * @param  {Object} data  typeof Object or Array.\n * @param  {String} path  ex: '/menu/nav/list'.\n * @param  {Any}    value ex: {}.\n * @param {[type]}        return data this.\n */\nfunction set(data, path, value) {\n  Jsonuri(data, path, value)\n  return data\n}\n\n/**\n * Remove\n * @param  {Object} data  typeof Object or Array.\n * @param  {String} path  ex: '/menu/nav/list'.\n * @return {Any}          The deleted value.\n */\nfunction rm(data, path) {\n  let tmp = Jsonuri(data, path)\n  set(data, path, null)\n  return tmp\n}\n\n/**\n * Swap\n * @param  {Object} data    data type can be object or array.\n * @param  {String} pathA   ex: '/menu/nav/list/0'.\n * @param  {String} pathB   ex: '/menu/nav/list/2'.\n * @return {Object}         return data this.\n * @description  `pathA` the data swap `pathB`.\n */\nfunction swap(data, pathA, pathB) {\n  let _a = Jsonuri(data, pathA)\n  let _b = Jsonuri(data, pathB)\n\n  set(data, pathA, _b)\n  set(data, pathB, _a)\n  return data\n}\n\n/**\n * Move\n * @param  {Object} data      data type can be object or array.\n * @param  {String} pathA     ex: '/menu/nav/list/0'.\n * @param  {String} pathB     ex: '/menu/nav/list/2'.\n * @param  {String} sequence  ex: 'before', default 'after'.\n * @description Move data in the array.\n */\nfunction mv(data, pathA, pathB, direction = 'after') {\n  let aParent = get(data, pathA + '/../')\n  let bParent = get(data, pathB + '/../')\n  let _a = get(data, pathA)\n  let _b = get(data, pathB)\n  let aIndex = indexOf(pathA)\n  let bIndex = indexOf(pathB)\n\n  /*\n   Â¶ÇÊûúÂêå‰∏™Êï∞ÁªÑ‰∏≠ÁßªÂä®ÔºåË¶ÅËÄÉËôëÁßªÂä®ÂêéÊâÄÈúÄË¶ÅÁßªÈô§ÁöÑË∑ØÂæÑÔºàPathAÔºâÊï∞ÊçÆÊåáÈíàÊúâÂèòÔºå\n   ÊâÄ‰ª•Ë¶ÅÂà§Êñ≠ÊòØÂêå‰∏™Êï∞ÁªÑÔºåÂπ∂‰∏î\n   */\n\n  if (aParent !== bParent) {\n    //ÊîæÂÖ•Êñ∞ÂÄº\n    insert(data, pathB, _a, direction)\n    //Âà†Èô§PathA\n    rm(data, pathA)\n    return\n  }\n\n  //ÁßªÂä®‰ΩçÁΩÆÁõ∏ÂêåÁõ¥Êé•ÈÄÄÂá∫\n  if (aIndex === bIndex) return\n\n  //ÊîæÂÖ•Êñ∞ÂÄº\n  insert(data, pathB, _a, direction)\n\n  //Êõ¥Êñ∞bIndex\n  bIndex += direction === 'before' ? -1 : 0\n\n  //ÂêëüëàÁßªÂä®aIndex + 1\n  if (bIndex < aIndex) {\n    aIndex++\n  }\n\n  pathA = normalizePath(pathA, `/../${aIndex}`)\n  rm(data, normalizePath(pathA, `/../${aIndex}`))\n}\n\n/**\n * Up\n * @param  {Object} data      data type can be object or array.\n * @param  {String} pathA     ex: '/menu/nav/list/0'.\n * @description Move up data in the array.\n */\nfunction up(data, path, gap = 1) {\n  let parent = get(data, path + '/../')\n  let index = indexOf(path)\n  let targetIndex = index - gap\n  let pathB = normalizePath(path, `/../${targetIndex}/`)\n\n  if (!isArray(parent)) {\n    console.error('Êìç‰ΩúÁöÑ‰∏çÊòØÊï∞ÁªÑ')\n    return\n  }\n  //ÁßªÂä®Ê∫¢Âá∫\n  if (index <= 0 || index >= parent.length) {\n    return\n  }\n\n  mv(data, path, pathB, 'before')\n}\n\n/**\n * Down\n * @param  {Object} data      data type can be object or array.\n * @param  {String} pathA     ex: '/menu/nav/list/0'.\n * @description Move up data in the array.\n */\nfunction down(data, path, gap = 1) {\n  let parent = get(data, path + '/../')\n  let index = indexOf(path)\n  let targetIndex = index + gap\n  let pathB = normalizePath(path, `/../${targetIndex}/`)\n\n  if (!isArray(parent)) {\n    console.error('Êìç‰ΩúÁöÑ‰∏çÊòØÊï∞ÁªÑ')\n    return\n  }\n  //ÁßªÂä®Ê∫¢Âá∫\n  if (index < 0 || index >= parent.length) {\n    return\n  }\n\n  mv(data, path, pathB, 'after')\n}\n\n/**\n * Âú® path ‰πãÂâç ÊàñËÄÖ‰πãÂêéÊèíÂÖ•‰∏Ä‰∏™Êï∞ÊçÆ, Â¶ÇÊûú‰∏çÊòØÊï∞ÁªÑ,ÊéßÂà∂Âè∞Êä•Èîô\n * @param  {[type]} data      [description]\n * @param  {[type]} path      [description]\n * @param  {String} direction [description]\n * @return {[type]}           [description]\n */\nconst [max, min] = [Math.max, Math.min]\n\nfunction insert(data, path, value, direction = 'after') {\n  let parent = get(data, path + '/../')\n  let index = path.split('/').filter(item => item).slice(-1)[0] - 0\n\n  if (!isInteger(index)) {\n    console.error(path + '‰∏çÊòØÊï∞Â≠ó')\n    return\n  }\n\n  if (!isArray(parent)) {\n    console.error(path + '‰∏çÊòØÊï∞ÁªÑ')\n    return\n  }\n\n  let isAfter = direction === 'after'\n  let target = isAfter ? index + 1 : index\n  target = min(parent.length, target)\n  target = max(0, target)\n  parent.splice(target, 0, value)\n  return data\n}\n\nexport default {get, set, rm, swap, mv, up, down, insert, walk, normalizePath}\n// export {get, set, rm, swap, mv, up, down, insert, walk, normalizePath}\n"]}